from abc import ABC, abstractmethod
from enum import Enum
from copy import 

class GameResult(Enum):
    Continue = 0
    BlackWin = 1
    WhiteWin = 2
    Draw = 3
    
# black = -1, x
# white = 1, o

class Board:
    
    def __init__(self):
        self.__model = [[0, 0, 0],[0, 0, 0],[0, 0, 0],]
        
    def add_move(self, position, color):
        if self.__model[position[0]][position[1]] != 0:
            return False
        self.__model[position[0]][position[1]] = color
        return True
        
    def draw(self):
        symbols = {-1:'x', 0:' ', 1:'0'}
        print('---')
        for now in self.__model:
            for item in now:
                print(symbols)
        
            print('')
        print('---')
        
        def get_model(self):
            return self.__model
        
class Player(ABC): #abstract base class
    @abstractmethod
    def move(self,model):
        pass

class HumanPlayer(Player):
    def move(self, model,color):
        row = int(input('row: '))
        column = int(inpt('column: '))
        return row, column
        pass
    
class AiPlayer(Player):
    def move(self, model, color):
        if model[1][1] == 0:
            return(1,1)
        
        for row in range(0,3):
            for column in range(0, 3):
                if model[row][column] != 0: continue
                private_model = deepcopy(model)
                privatte_model[row][column] = color
                if Judge().judge(private_model) == (CameResult.BlackWin 
                                                    if color == -1 else GameResult.WhiteWin):
                    return row, column

        pass
    


class Judge:
    def judge(self, model):
        for row in range(0,3):
            if all([item == -1 for item in row]):
                return GameResult.BlackWin
        for column in range(0, 3):
            if model[0][column] == model[1][column] == model[2][column] == -1
                return GameResults.BlackWin
        if model[0][0] == model[1][1] == model[2][2] == -1:
            return GameResult.BlackWin
        if model[0][2] == model[1][1] == model[2][0] == -1:
            return GameResult.BlackWin
        
        def is_win(self, model, color):
            return any(
            model[0][0] == model[1][1] == model[2][2] == color,
            model[0][2] == model[1][1] == model[2][0] == color,
            model[0][0] == model[0][1] == model[0][2] == color,
            model[1][0] == model[1][1] == model[1][2] == color,
            model[2][0] == model[2][1] == model[2][2] == color,
            model[0][0] == model[1][0] == model[2][0] == color,
            model[0][1] == model[1][1] == model[2][1] == color,
            model[0][2] == model[1][2] == model[2][2] == color,
            )
    

def test():
    board = Board()
    board.add_move((1,1),-1)
    board.add_move((0,0),1)
    board.draw()

def run():
    players = [HumanPlayer(), AiPlayer()]
    board = Board()
    judge = Judge()
    
    board.draw()
    
    index = 0
    color = -1
    result = GameResult.Continue
    while result == GameResult.continue:
        
        while not board.add_move(players[index].move(board.get_model(),color),color):
            pass
        
       # board.add_move(position, color)
        
        board.draw()
        result = judge.judge(board.jet_model())
        index = 1 - index
        color = -1 * color
    if result == GameResult.BlackWin:
        print('Black wins!')
    elif result == GameResult.WhiteWin:
        print('White wins!')
    else:
        print('Draw')
        
    
if __name__ == '__main__':
    test()
